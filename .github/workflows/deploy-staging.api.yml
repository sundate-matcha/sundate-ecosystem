name: ðŸš€ Deploy as a Staging Environment | Dellbuntu

on:
  push:
    branches: ['staging-api']
  pull_request:
    branches: ['staging-api']

permissions:
  contents: read
  packages: write

env:
  ORIGIN_SERVER_NAME: 'justdemo.work'
  PROJECT_NAME: 'sundate'
  IMAGE_NAME_API: 'api'
  REGISTRY: ghcr.io # Use GitHub Container Registry (or Docker Hub if you prefer)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # âœ… GitHub-hosted runner
    steps:
      - uses: actions/checkout@v4

      # 1. Authenticate to container registry
      - name: Log in to GitHub Container Registry
        # âœ… Use GitHub token to authenticate to container registry instead of personal access token (the GITHUB_TOKEN is an auto-generated key by GitHub)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      # 2. Build & push API image
      - name: Build and push API image
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_API }}:staging
          docker build -t $IMAGE -f ./apps/api/Dockerfile.standalone ./apps/api
          docker push $IMAGE

      # 3. SSH into server and deploy via docker-compose
      - name: Deploy on server with docker-compose
        # âœ… Use appleboy/ssh-action to SSH into server and deploy via docker-compose
        uses: appleboy/ssh-action@v1.1.0
        env:
          # SSH - Organization secrets
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          # API - Repository secrets
          BASE_API_URL: ${{ secrets.BASE_API_URL }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          # JWT - Repository secrets
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          # Nginx - Repository secrets
          NGINX_PORT: ${{ secrets.NGINX_PORT }}
          NGINX_DOMAIN: ${{ secrets.NGINX_DOMAIN }}
        with:
          host: ${{ env.STAGING_HOST }}
          username: ${{ env.STAGING_USER }}
          key: ${{ env.STAGING_SSH_KEY }}
          script: |
            set -e
            cd ~/apps/${{ env.PROJECT_NAME }}

            # Log in to registry from server
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Update environment files if needed
            cat <<EOF > apps/api/.env
            MONGO_URI=${{ env.MONGO_URI }}
            JWT_SECRET=${{ env.JWT_SECRET }}
            JWT_REFRESH_SECRET=${{ env.JWT_REFRESH_SECRET }}
            BASE_API_URL=${{ env.BASE_API_URL }}
            EOF

            cat <<EOF > nginx/.env
            NGINX_PORT=${{ env.NGINX_PORT }}
            NGINX_DOMAIN=${{ env.PROJECT_NAME }}.${{ env.ORIGIN_SERVER_NAME }}
            EOF

            # Pull latest image & restart via docker-compose
            docker-compose -f docker-compose.api.yml pull
            docker-compose -f docker-compose.api.yml up -d --remove-orphans
